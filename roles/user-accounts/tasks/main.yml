# Install py39-jmespath so the "Adding users" task works.
- name: Install py39-jmespath
  community.general.pkgng:
    name:
      - py39-jmespath
    state: present
  when:  ansible_distribution == "FreeBSD"

- name: Copy sudo config
  copy:
    src: roles/user-accounts/files/
    dest: /
  when: ansible_distribution == "FreeBSD"

# Creates an absolutely indecipherable dict we have to simplify later.
- name: Locate shell executables
  find:
    # HACK: Instead of rifling through /etc/shells, we try /usr/bin,
    #       /usr/local/bin, _then_ /bin, in that order.
    paths:
    - /usr/bin
    - /usr/local/bin
    - /bin
    patterns: "{{ user_accounts[item].shell }}"
  register: shell_executables_raw
  with_items: "{{ create_users }}"

- name: Adding users
  user:
    name: "{{ item }}"
    groups: "{{ user_accounts[item].groups }}"
    append: yes
    generate_ssh_key: yes
    shell: "{{ shell_executables[item] }}"
    state: present
  with_items: "{{ create_users }}"
  register: users
  vars:
    # Turn the aforementioned indecipherable dict into a list formated like
    # [["shell1", "/path/to/shell1"], ["shell2", "/path/to/shell2"]]
    shell_executables_list: "{{ shell_executables_raw | json_query('results[*].[item, files[0].path]') }}"
    # Turn the aforementioned list into a dict.
    shell_executables: "{{ dict(shell_executables_list) }}"

- name: Add authorized keys
  ansible.posix.authorized_key:
    user: "{{ item }}"
    key: "{{ user_accounts[item].key }}"
    state: present
  with_items: "{{ create_users }}"

- name: Expiring Passwords for new users (Linux)
  command: "passwd -e {{ item.item }}"
  with_items: "{{ users.results }}"
  when: item is changed and ansible_distribution != "FreeBSD"

- name: Expiring Passwords for new users (FreeBSD)
  command: "pw usermod {{ item.item }} -p -1"
  with_items: "{{ users.results }}"
  when: item is changed and ansible_distribution == "FreeBSD"
